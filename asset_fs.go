// Code generated by vfsgen; DO NOT EDIT.

package godin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 23, 22, 49, 9, 953570332, time.UTC),
		},
		"/endpoint": &vfsgen۰DirInfo{
			name:    "endpoint",
			modTime: time.Date(2019, 8, 24, 12, 11, 27, 54136845, time.UTC),
		},
		"/endpoint/endpoints.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "endpoints.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 23, 30, 37, 238022753, time.UTC),
			uncompressedSize: 1068,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x41\x6f\xe2\x3c\x10\xbd\xe7\x57\x8c\xd0\x77\x48\x24\x70\xee\x48\x9c\x68\xbf\x55\xa5\x85\x56\x0b\x7f\xc0\x38\xd3\xac\x97\x60\xbb\xf6\x84\x82\x22\xff\xf7\x95\xed\x24\xa4\xb4\xdb\x43\x20\x9e\x37\x33\xef\x3d\xcf\xa4\x2c\x61\xad\x2b\x84\x1a\x15\x5a\x4e\x58\xc1\xe1\x0a\xb5\xae\xa4\x62\xf0\xf0\x0c\xdb\xe7\x3d\x3c\x3e\x3c\xed\x59\x66\xb8\x38\xf2\x1a\x01\x55\x65\xb4\x54\x94\x65\x5d\xb7\x80\xff\x8c\xd5\x7f\x50\x10\x2c\x57\xc0\x5e\xfa\x77\xef\x47\x8c\xf4\xa1\x7d\x1d\xc0\x74\x18\x50\x87\xf6\x8c\x36\x62\x1b\x5d\xb5\x0d\x8e\x08\x99\x26\x86\xf7\x78\x32\x0d\xa7\x08\x64\xf2\x64\xb4\x25\xc8\x33\x00\x80\x99\xd0\x8a\xf0\x42\xb3\x74\xaa\x25\xfd\x6e\x0f\x4c\xe8\x53\x59\xeb\xc5\x51\x52\x19\x9e\x41\xe9\x2c\x8b\x59\x0c\x66\x5d\x37\x0a\xbe\x71\x96\x52\x11\x5a\xc5\x9b\x72\x0a\xef\xd0\x9e\xa5\x40\xb6\xe5\xa7\x90\x34\xcb\x8a\x60\x18\x2c\x57\x35\xde\x9c\x0d\x69\x2e\x48\xa4\xab\x41\xd8\x21\x81\x23\xdb\x0a\x82\x2e\xd2\x8e\x45\xec\xd7\xcb\x3a\xe6\xa5\x68\xec\xec\xfd\x63\x2f\x72\xbc\x57\x36\x44\xfa\xbc\x45\x40\x42\x99\xcf\xb2\xd7\x56\x09\xd8\xe2\xfb\x90\xb2\x43\xca\xdd\x59\x40\xaf\xa2\x88\xec\xdf\xd1\x9e\xb9\x0d\x48\xa3\xdf\xd1\xc2\xe0\xed\x5f\xd4\xf1\xb7\xef\x75\x57\xb1\x82\x0d\x3f\xe2\x27\x13\x41\x4c\x11\xcb\xfc\xbd\xfa\x78\xb6\x48\xad\x55\x41\xe5\xb4\xf9\xe2\x2b\xa5\x5f\x5e\xd2\xf2\x4e\x8a\xf7\xf3\x0f\x7d\x7a\xae\x24\xc0\x4f\x06\x36\xb6\x8e\xfb\x65\xf1\x2d\xec\x57\x7e\x1b\xe3\x0f\xa4\x0d\x3a\xc7\x63\x2a\xbe\xb5\xe8\x68\x7f\x35\x58\x4c\x4a\xdc\xb7\x25\xce\x68\xe5\x70\xac\x49\x93\xca\x5d\xb0\x5a\xdc\x7c\xe4\x82\x2e\xd0\xaf\x2e\x5b\xa7\xff\x79\xf0\x14\x24\xb1\xff\x25\x36\xd5\x4f\xe9\xc2\x07\x54\x40\x9e\xc2\xee\x16\xf6\x7e\x0e\x68\x6d\x78\xb4\x2d\xfa\xf9\x58\x74\x26\x85\x97\x2b\x70\xec\xf3\x48\x04\x5d\x02\x45\x64\x48\x50\xf7\x91\x71\x17\xb7\xf5\x49\xc9\xc0\x0b\xbe\xc8\x92\xe5\x61\x6e\x93\xf7\xbf\x01\x00\x00\xff\xff\x64\xa2\x70\xc8\x2c\x04\x00\x00"),
		},
		"/endpoint/request_response.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "request_response.go.tmpl",
			modTime:          time.Date(2019, 8, 24, 12, 11, 27, 46136841, time.UTC),
			uncompressedSize: 406,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbd\x4e\xc3\x30\x14\x85\x67\xf2\x14\x77\x60\x80\x01\x77\x47\x62\x6a\x01\x75\xe8\x8f\x68\x5e\xc0\x8d\x0f\x91\x21\xb5\x5d\xdf\x9b\x4a\x91\x95\x77\x47\x75\x7e\xca\xd4\xed\xfa\x7e\xfe\xce\xb1\xbc\x58\xd0\xd2\x1b\x50\x0d\x87\xa8\x05\x86\x8e\x1d\xd5\xde\x58\xa7\x68\xb5\xa3\xed\xae\xa4\xf7\xd5\xba\x54\x45\xd0\xd5\xaf\xae\x41\x70\x26\x78\xeb\xa4\x28\x52\x7a\xa1\xc7\x10\xfd\x0f\x2a\xa1\xd7\x37\x52\xfb\x71\xee\xfb\x99\x89\x3f\xb6\xdf\x13\x1c\x0e\x13\x65\xc4\x0b\x62\x66\x1b\x6f\xda\x06\x33\x91\xd0\xe4\x75\x89\x53\x68\xb4\x64\x70\xad\xa3\xa8\x5d\x8d\x5b\xae\x3a\x20\x5e\x6c\x05\x1e\xcc\x11\xab\xaf\xfd\x92\xe7\xac\x88\xf3\x35\xeb\xe9\x26\x7d\x42\x36\x60\xd6\xf9\x2a\xce\x2d\x58\xca\x2e\xe0\xf9\x9f\xc2\x77\x15\x0e\xde\x31\x66\xa7\x90\x2e\x80\x52\x52\x5b\x7d\x42\xdf\x8f\x91\xc4\x12\xdb\x4a\x28\x15\x0f\x29\xe5\x67\xa8\x0f\x8b\xc6\x1c\xf2\x7a\xed\x6c\xfe\xa6\xa1\x11\xce\x4c\xe5\xe3\xf8\x17\x00\x00\xff\xff\x2d\x9d\x71\x87\x96\x01\x00\x00"),
		},
		"/protobuf_example.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "protobuf_example.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 21, 52, 9, 367506282, time.UTC),
			uncompressedSize: 2267,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x4b\x6f\x9b\x4c\x14\x5d\x87\x5f\x71\x65\x7d\x0b\x88\xfc\xe1\xaa\xdd\x59\x22\x52\x95\xd0\x34\x52\xec\xa4\xe0\xac\xa2\x28\x9a\xc2\x8d\x4b\x0b\x03\x9e\xb9\x58\x89\x10\xff\xbd\x62\x66\x78\xf9\x55\xa9\xea\x2e\xde\x60\xb8\x8f\x73\xe6\xdc\x73\xa7\x60\xd1\x2f\xb6\x46\x20\x94\x64\x59\x49\x56\xe4\x82\x60\x12\xe5\x9c\xf0\x95\x26\x96\x55\x55\xff\xc3\x7f\x85\xc8\x7f\x62\x44\x30\xf7\xc0\xbd\x37\xff\xeb\xba\x8b\x51\xfe\xbd\x7c\x69\x83\xfa\xa5\x8d\x4a\x14\x5b\x14\x2a\xb6\xc8\xe3\x32\xc5\x2e\x42\x45\xaa\x3e\xaf\x30\x2b\x52\x46\x2a\x60\x55\x15\x08\xc6\xd7\xd8\xb7\x75\x43\x14\xdb\x24\x42\xd9\xc4\xe9\xad\x40\xa8\x2a\x70\x97\x2c\xc3\xba\x86\x84\x13\x8a\x17\x16\x21\x54\x16\x00\x40\xd3\x58\xd7\xbb\xc1\xfd\xa5\x2a\x01\xf3\x53\x98\x02\x37\x0d\xa6\xdd\x77\xbf\x46\x5a\xa0\x94\x4c\x95\xe0\xa6\x44\x49\xab\xb7\x02\x9d\x03\xa5\xf2\x64\xa9\x2c\x72\x2e\xb1\xab\x1d\x15\x1b\x4a\x97\x79\x96\x21\x27\x39\x68\x3d\x9b\xa9\xe3\xec\xa2\x21\x8f\x77\x3f\x25\x2f\x80\x1b\xb0\x53\xe4\x8a\x8b\xfb\x25\xc1\x34\xbe\x4d\x24\x39\xf0\x61\x9c\xab\xd5\x81\xba\xb6\x23\x7a\x05\x33\x49\xf7\x52\x3f\xa7\x20\xf4\x29\x9b\xc4\x46\x8f\x36\xd9\x01\x1b\x85\x00\x14\x22\x17\xce\x98\x4c\x2a\xf1\x1f\x21\x08\x23\x93\x09\xc9\x36\x34\x85\x63\xd8\xbd\x10\x83\x57\xed\x20\xf3\x62\xf5\x0a\xf7\xb3\x31\x83\x91\xda\x6d\xb3\x73\xd5\x21\xfc\xfa\x39\xf0\xaf\x60\x71\x77\xe5\xdf\x86\xd6\xf9\xcc\x38\x51\x2b\xeb\xde\xc8\x45\x1e\x63\x0a\x24\x4a\x75\x5c\x33\x1a\xc3\x10\xe4\x0f\x26\x30\x86\xac\xc9\x19\xfb\x50\x45\x49\x94\x11\x75\x2e\x6c\x27\xae\x86\xb4\x67\x43\x03\x18\x60\x81\x8c\x30\x56\x88\x83\x14\xd3\x82\x12\x4a\xb1\x47\x78\x7c\x6a\xf0\x1a\x7f\xed\x99\x65\x67\x3e\x87\xeb\x8f\x56\xff\x59\xe1\xb1\xd8\x87\xc4\x04\xdb\x5f\x3e\x2c\x42\xa7\x17\x75\x77\x20\x3e\x2f\x33\xd9\xed\x3e\x6f\x48\xcd\xbd\x21\xc7\x4e\x71\xfd\x4d\xa7\xd4\x35\x20\x2f\x33\x14\x8c\x92\x9c\x77\xb2\x77\xc1\x84\xd3\xa7\x8f\x56\x94\x73\x49\x60\x5b\x67\x83\x5d\xeb\x95\x3f\x1b\x14\x3c\xef\xeb\xe2\x29\x65\xee\x44\x8c\xe2\x80\x0e\x8e\x3e\x31\xdc\x2c\x57\xe0\x5d\x40\xb8\x0a\x6e\x96\xd7\xa0\x4e\xb9\x65\x62\xc8\xe5\x59\x3d\x3d\xc8\x58\xf1\xa8\x68\x3d\x49\x12\x09\x5f\x57\x27\x68\x75\xb0\x73\x98\x0c\xdc\x34\x99\xea\x9a\x6e\x16\x9a\x83\x01\xf7\x2e\x14\x9b\x83\x1c\xb6\x2c\x2d\x5b\x12\x1a\xfe\x49\x71\xd9\xbb\x1d\xc7\xc6\x1c\x81\xcf\x47\x82\x4c\x4f\xef\x5e\xef\x87\xc0\xff\xf6\xe0\x87\xab\xf0\xb8\x05\xc6\x3b\x39\xd8\x3b\x73\xef\x76\x9b\xf7\x2e\xb6\xeb\xe4\x72\x05\x7e\x78\x7f\xb7\x0c\xfd\xbf\x53\xd3\xdc\xb1\xef\x5e\xce\xdf\x01\x00\x00\xff\xff\xc5\x1e\xc2\xeb\xdb\x08\x00\x00"),
		},
		"/transport": &vfsgen۰DirInfo{
			name:    "transport",
			modTime: time.Date(2019, 8, 1, 11, 6, 44, 716897420, time.UTC),
		},
		"/transport/grpc": &vfsgen۰DirInfo{
			name:    "grpc",
			modTime: time.Date(2019, 8, 23, 22, 30, 18, 180873756, time.UTC),
		},
		"/transport/grpc/client.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "client.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 18, 7, 12, 535179892, time.UTC),
			uncompressedSize: 158,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x49\x2d\x2e\xe1\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x4a\xce\xcf\x2b\x49\xad\x28\x51\xe2\xe2\xaa\xae\xd6\x55\x50\x29\x28\xca\x2f\xc9\x4f\x2a\x4d\x53\xb0\xb2\x55\xd0\x0b\x80\x71\x6a\x6b\x21\xb2\xc9\x39\x99\xa9\x79\x25\x60\x39\xdf\xfc\x94\xd2\x9c\x54\xb8\x4c\x49\x41\x0e\x58\x38\x24\x35\xb7\x20\x27\xb1\x04\x2c\xc1\xa5\xaf\xaf\xe0\xe1\xea\xe3\xe3\xaf\xe0\xec\xe3\xe9\xea\x17\x02\xe2\x57\x57\xc3\x4c\xd1\x0b\x4a\x2d\x29\xaa\x74\xce\x2f\xcd\x2b\x01\x29\x06\x04\x00\x00\xff\xff\xe2\x0b\x91\x64\x9e\x00\x00\x00"),
		},
		"/transport/grpc/server.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "server.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 22, 30, 18, 172873782, time.UTC),
			uncompressedSize: 2377,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x35\x8a\xc2\x5a\x38\xd4\x3d\x40\x4e\x4e\xb0\xed\x61\xe3\xc0\xf1\xbd\xa0\xa5\xb1\xc2\xae\x44\x32\x24\x95\xdd\x40\xf0\xbf\x17\x43\x52\xb4\x62\xd9\x45\x7a\xd9\x83\x61\x92\x33\xc3\x79\x33\xef\x71\x54\x96\xb0\x56\x35\x42\x83\x12\x0d\x77\x58\xc3\xfe\x1d\x1a\x55\x0b\xc9\xe0\x7e\x03\x8f\x9b\x1d\x3c\xdc\xff\xb5\x63\xb9\xe6\xd5\x77\xde\x20\x34\x46\x57\x79\x3e\x0c\x37\xf0\xbb\x36\xea\x1f\xac\x1c\xdc\xde\x01\x7b\x8a\xeb\xe3\x31\xd9\x9c\xda\xf7\x87\xd1\x18\x36\xa3\xd5\xa2\x79\x43\xe3\x6d\xdf\x54\xdd\xb7\x98\x2c\x4e\xb7\xfe\x78\x87\x9d\x6e\xb9\xf3\x86\x5c\x74\x5a\x19\x07\xcb\x3c\x5b\x54\x4a\x3a\xfc\xe9\x16\x79\xb6\x40\x63\x94\xb1\xb4\x6a\x84\x7b\xe9\xf7\xac\x52\x5d\xd9\xa8\x9b\xef\xc2\x95\xf4\x73\x86\x4b\x4b\x81\x25\x61\x5e\xe4\x79\xa6\xf7\xb0\x18\x86\x04\x3c\xe1\x3a\x81\x20\xaf\x0f\x2e\xc9\x52\x0a\xe9\xd0\x48\xde\x96\x28\x6b\xad\x84\x74\x8b\xbc\xa0\x46\x80\xe1\xb2\xc1\x53\xc5\xec\x19\xcd\x9b\xa8\xd0\x12\x74\xf7\xae\x11\x86\x01\xd8\x23\xef\xf0\x78\x7c\x0e\x75\x5b\x67\xfa\xca\xc1\x90\x67\x29\x9c\x6d\x9f\xd6\x3e\x22\xcb\x46\x77\x38\x1e\xff\xe4\xb2\x6e\xd1\xf8\xa6\xb3\xb8\xa1\xa0\x1b\x40\x59\x93\x37\x75\x2d\xb4\x53\x54\xe8\x83\xa8\x79\x31\x3a\x3f\xf4\xb2\x82\x47\xfc\x31\xb9\x31\x20\x58\x8e\x35\x58\x18\x57\xec\x19\xdd\x0a\x94\x76\x42\x49\x0b\x8c\x31\x9f\x33\xb8\x6f\xfc\x69\x01\x7a\xcf\x66\x57\x51\x15\x06\x5d\x6f\x24\xfc\x31\x33\x0e\xa1\x9c\x4f\x94\x78\x1b\x6a\x7c\xc4\x1f\x11\x61\x9e\x65\x59\x42\x39\x4d\xfb\x10\x0f\x57\xe4\x71\x8f\x95\xaa\x71\x62\xdd\xe2\x6b\x8f\x36\x18\x1f\xe4\xcc\x68\xb5\x92\x16\xbd\x35\x96\xca\x18\xa3\x6d\xb1\xf2\xb0\x52\x63\x33\xea\x6d\x3e\xc7\x1e\x54\x6a\xf0\x95\x1a\xbd\x3c\x91\xfe\x15\xdd\x37\xb4\x96\x7b\xdf\x80\x61\xf7\xae\xb1\x48\xc2\x36\x68\xff\x33\x24\x20\x4b\x31\x79\x59\xc2\x04\x39\x08\x0b\xee\x05\x81\x57\xae\xe7\x2d\xbc\x44\x5d\x88\x4e\xb7\xd8\xa1\x74\x9c\x6a\x01\x75\xf0\x4e\xdb\xa7\x35\xd4\x78\x10\x12\x6b\x10\xd2\x1f\xa5\xa4\x41\x13\x4b\x6b\xde\xe0\xcb\xb9\x74\x46\xd6\x8a\x69\xe6\x65\xe5\x7e\x42\x7c\x75\x6c\x1d\xfe\x57\x60\x42\x89\xf0\x25\x48\x82\x1a\x32\x06\x14\xb0\x3c\x9d\xda\xf1\x74\x05\xfe\xb9\x16\x24\x97\xbf\x29\x3e\x32\x41\xc7\xd4\x17\x6b\xde\xd8\x5c\x15\x41\x7f\x5f\xb7\x4f\x6b\x82\x91\xd2\x16\x79\x26\x0e\x3e\xf2\xb7\x3b\x90\xa2\xa5\x4b\x01\x00\xca\x12\x76\x9b\xfb\xcd\x2d\xa0\x67\x3e\xa4\x0c\xa6\x28\x51\x29\x5a\x9f\x92\xf8\x1d\x65\x3b\x62\x61\x97\x70\x17\x2b\x8a\xc9\x03\x89\x51\x1b\x17\x64\xf1\x0b\x55\x71\x4d\xf2\x24\x91\x58\x8a\xd8\xb7\x48\x62\xa8\xc9\x55\xc8\x06\xb8\x04\x21\x2b\xd5\xd1\x3a\x4d\xe6\x33\xde\xa0\x0b\x69\x29\x87\x90\x4e\x01\x87\x5a\x75\x5c\xc8\x1b\xab\xb1\x12\x07\x51\xc5\xb9\x15\x35\x74\x0d\xc7\x65\xc1\xe8\x7d\x82\x49\x73\xf4\xc0\x2b\x1c\x48\x2a\x93\xdd\x54\x22\xe2\x30\x89\xb8\x4b\x24\x67\x67\x34\x2a\x63\x69\x64\x2c\x17\xde\x3e\x83\xb2\x28\x22\xcf\x9e\x97\x74\xe1\x48\x74\x1c\xca\xdb\x24\xaa\x28\xaf\x24\xca\x73\x97\x50\xb2\x59\x1a\x7c\xbd\x24\xc1\x73\x74\x1f\x45\x16\xaf\x0e\x6a\xa2\x26\x5f\x1d\x4f\x17\x98\xf4\x82\x26\xf6\x54\xef\x1a\x45\x8b\x33\x9d\x46\x6e\xec\x84\xbd\x44\x74\x24\x36\xf2\x36\xa6\x4d\xa5\x85\xa4\xd7\xde\xf9\x08\xe9\x93\xac\xa5\x80\x4f\x93\x76\x86\x23\x71\xe6\x1f\xc6\xe9\x6d\xa6\xef\xd4\x30\x24\xd5\x1e\x8f\x05\x7d\xd4\xb7\xe7\xc3\x64\x76\x69\xa8\x99\x88\xb3\xff\x97\xb8\xe9\xf5\xb3\x49\x30\x59\xfe\x1b\x00\x00\xff\xff\xc1\xbd\xcd\xd9\x49\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/endpoint"].(os.FileInfo),
		fs["/protobuf_example.go.tmpl"].(os.FileInfo),
		fs["/transport"].(os.FileInfo),
	}
	fs["/endpoint"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/endpoint/endpoints.go.tmpl"].(os.FileInfo),
		fs["/endpoint/request_response.go.tmpl"].(os.FileInfo),
	}
	fs["/transport"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/transport/grpc"].(os.FileInfo),
	}
	fs["/transport/grpc"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/transport/grpc/client.go.tmpl"].(os.FileInfo),
		fs["/transport/grpc/server.go.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
