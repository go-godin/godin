// Code generated by vfsgen; DO NOT EDIT.

package godin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 25, 17, 49, 16, 200094136, time.UTC),
		},
		"/endpoint": &vfsgen۰DirInfo{
			name:    "endpoint",
			modTime: time.Date(2019, 8, 25, 17, 40, 38, 450141175, time.UTC),
		},
		"/endpoint/endpoints.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "endpoints.go.tmpl",
			modTime:          time.Date(2019, 8, 25, 17, 40, 38, 446141148, time.UTC),
			uncompressedSize: 1966,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xcb\x6e\xeb\x38\x0c\xdd\xfb\x2b\x38\xc6\x2c\x6c\x20\x91\xf7\x01\xb2\x4a\x33\x83\x02\xb7\x6d\xd0\xe4\x07\x5c\x99\x49\x75\xeb\x48\x2e\x25\xa7\x2d\x0c\xff\xfb\x05\x65\xf9\x91\x47\xbb\xbd\x0b\x27\x11\x1f\x87\x87\xe4\x91\x93\x65\xb0\x32\x05\xc2\x01\x35\x52\xee\xb0\x80\x97\x2f\x38\x98\x42\x69\x01\x77\x4f\xf0\xf8\xb4\x83\xf5\xdd\xfd\x4e\x44\x55\x2e\xdf\xf2\x03\x02\xea\xa2\x32\x4a\xbb\x28\x6a\x9a\x39\xfc\x5b\x91\xf9\x8d\xd2\xc1\x62\x09\x62\x13\x7e\xb7\xed\xe0\x73\xe6\xa5\xde\xf7\xce\xee\xd0\x7b\x2d\xd2\x09\xc9\xfb\x1e\x4c\x51\x97\x38\x78\x5c\x55\x7a\xf3\x0e\x8f\x55\x99\x3b\xef\x88\xd4\xb1\x32\xe4\x20\x89\x00\x00\x62\x69\xb4\xc3\x4f\x17\x77\xa7\x83\x72\xaf\xf5\x8b\x90\xe6\x98\x1d\xcc\xfc\x4d\xb9\x8c\x9f\x9e\x69\x1c\xf9\x28\x01\x71\xd3\x0c\x84\xc7\x9a\x99\xd2\x0e\x49\xe7\x65\x36\x75\x6f\x91\x4e\x4a\xa2\x78\xcc\x8f\x1c\x14\x47\x29\x37\x0c\x94\xeb\x03\x8e\x9d\xf5\x61\x96\x29\xba\xaf\x0a\x61\x8b\x0e\xac\xa3\x5a\x3a\x68\x7c\xd9\x21\x49\x3c\x6f\x56\x3e\xae\xb3\x7a\xe4\xb6\x5d\x07\x92\xc3\x5c\x45\x6f\x09\x71\x73\xf6\x70\x5a\x1b\x45\xfb\x5a\x4b\x78\xc4\x8f\x3e\x64\x8b\x2e\xb1\x27\x09\x81\x45\xea\xab\xff\x54\xf6\x94\x13\x7b\x4a\xf3\x81\x04\x7d\x6f\xdf\x95\xf6\x9f\x01\xeb\x22\x63\x09\x0f\xf9\x1b\x5e\x35\xc1\x64\x52\x9f\xd6\x5e\xb2\xf7\x67\x42\x57\x93\x66\x96\x53\xf0\xf9\x2d\xa6\x37\x87\xb4\xb8\xa0\xd2\xb6\xb3\x33\x9c\x50\xab\x23\xd0\x46\xd7\x33\xf0\xf2\x22\x7c\x67\x79\x25\xe3\x16\xff\x47\xf7\x80\xd6\xe6\x3e\x14\xdf\x6b\xb4\x6e\xf7\x55\x61\x3a\x49\xb1\x3f\xa6\xd8\xca\x68\x8b\x43\x4e\x94\x65\xb7\x07\x04\xd2\xe8\x4e\x1d\x16\xdc\x2b\xc2\x60\xdf\x1b\xf2\x86\x21\x03\x9e\x37\xab\x6e\xdf\xdf\x4e\x7a\x5c\xfb\xd5\x02\xc3\xf2\xc2\xbc\x19\x26\x91\xee\x13\xc2\xad\x11\xab\xee\x7b\x06\xd4\x35\x0b\xfe\x0a\xec\x73\x89\x4d\x9b\x42\x42\xa1\x9f\xa9\x79\x06\x48\xc4\x8f\xa1\x74\x22\x8d\x30\xcb\x80\x23\x92\xa6\xe1\xf1\x06\xb2\xe9\x64\x39\x3c\x42\xf1\x9f\xc2\xb2\x60\x9f\x6d\x03\xe0\x62\x09\xf6\x24\xc5\xd0\x1f\xd3\x9c\x41\x40\x19\xc3\x37\x84\x7b\xf5\x89\x05\xc4\x6c\x8f\xa7\xd0\x4c\x96\x61\x42\x89\x0e\x66\x24\x78\x59\x7d\xeb\xa7\x7f\xaf\x95\x9b\x8a\x67\x4d\xb4\x60\x3e\xa3\xa5\x9d\x14\xf0\x43\xe4\x3a\x33\xd0\xaa\x9c\xc8\x6b\x54\xf7\x5f\x95\xda\x28\x1a\x75\xac\x4a\x3c\xa2\x0e\xf2\x0a\x02\x19\xf7\x08\x4a\x83\xa1\x02\xc9\x0b\x4e\x1a\x7d\x42\xad\x50\x3b\xc8\xa5\x44\x6b\xc1\x19\x9f\xd7\xeb\xc9\x0a\x86\xdf\xbd\x2a\x0b\xca\x42\x6d\x71\x5f\x97\x0c\x21\x4b\x4e\xb2\xa2\x13\x68\x62\xf9\x46\xa7\x70\xb6\xc4\x6b\xad\xf1\xdb\x75\xd8\xea\x2f\x65\xf9\x7f\x22\x85\xa4\x33\xdb\xd1\xdc\xde\xd2\x5a\x37\xfd\x5e\x31\xe2\xfa\x3e\x4c\x75\x13\x34\x70\x5e\x71\x5c\x3c\xbf\xc0\x82\x80\xd4\xde\x63\xfe\xb3\xe4\xc5\x9e\xc9\xda\xef\x5c\xab\xd2\x17\x9d\xbc\xd2\x86\xbb\xe1\x55\x6f\xab\x20\x79\x7b\x26\xf9\x90\x7e\xd6\xda\x95\x8e\x3b\x1c\x11\x03\x37\x3c\x1c\xd7\x44\x17\xd2\x9a\x1e\xfe\x04\x00\x00\xff\xff\x80\xe4\x98\x15\xae\x07\x00\x00"),
		},
		"/endpoint/request_response.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "request_response.go.tmpl",
			modTime:          time.Date(2019, 8, 25, 16, 53, 44, 844759005, time.UTC),
			uncompressedSize: 899,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4f\x8f\xd3\x30\x10\xc5\xcf\xf5\xa7\x18\xad\x38\xb4\x12\x38\x77\x24\x4e\xdb\x2e\xe2\xb0\x7f\xc4\xf6\x0b\x78\xe3\x97\x60\x48\x6c\x77\xec\x2c\xaa\xa2\x7e\x77\x64\xc7\x4d\x17\xa2\x82\xb8\x39\xf3\xfc\x66\x7e\xcf\x93\xaa\xa2\x5b\xa7\x41\x2d\x2c\x58\x45\x68\x7a\x39\x52\xeb\xb4\xb1\x92\xb6\x8f\xf4\xf0\xb8\xa7\xdd\xf6\xcb\x5e\x0a\xaf\xea\x1f\xaa\x05\xc1\x6a\xef\x8c\x8d\x42\x8c\xe3\x07\x7a\xe7\xd9\x7d\x47\x1d\xe9\xe3\x27\x92\x4f\xe5\x7c\x3a\xcd\x5a\x74\x2f\x43\x73\x16\xa7\x8f\xb3\x1a\xc0\xaf\xe0\xac\xdd\x3b\x3d\x74\x98\x95\xe8\xbb\x5c\xde\xa3\xf7\x9d\x8a\x59\x10\xa6\xf7\x8e\x23\xad\xc5\x4a\xd2\xcd\x38\xce\x93\x2f\xe6\xca\xd8\x08\xb6\xaa\xab\xde\xca\xcf\xe0\x57\x53\x43\x3e\xa8\x3e\x5d\xba\x11\x1b\x91\xd0\x89\x95\x6d\x71\x61\x3c\xdf\x0b\x13\x45\x91\xe5\xd7\xa7\xdb\x30\x73\x31\x0e\x89\x6b\x7d\x31\x7d\x46\xbc\x47\x08\x2a\x5f\xc5\x61\x40\x88\xfb\xa3\xc7\xe6\x8d\x25\xfc\xd5\x12\xbc\xb3\x01\xb3\x47\x54\x15\x8d\x63\x66\x3d\x9d\x4a\x43\xfa\xc9\xca\x07\x8a\xdf\x40\x5c\x2a\x8d\x41\xa7\x03\xb9\x26\x57\x67\x03\xed\xca\x6e\xa4\x88\x47\x8f\x65\xa7\x10\x79\xa8\x23\x8d\x62\x95\x5e\x88\x71\x90\x77\xa9\xd3\x73\x2e\x6f\x51\x77\x8a\xf3\x63\x2f\x40\x26\xcc\xdf\x48\x4a\xe9\x5f\x28\xef\x49\x69\x6d\x6c\x4b\xca\x12\x98\x1d\x4f\x8e\xd4\xdf\xf4\xbe\x43\x0f\x1b\x93\x9c\xdc\x77\xca\x74\x60\xca\x6b\x6c\x54\x8d\x65\x8c\x32\xf4\xcf\x1c\xe1\x4a\x8e\xd5\x8e\x79\x9a\x2a\xa6\x7d\xc0\xea\xf3\x6a\xca\xf1\xff\x7f\x85\x66\xb0\x35\xad\x79\x89\xb5\x99\x02\xe8\xf5\xa6\x24\x1d\x89\x11\x07\xb6\xc4\x32\x81\x5c\x43\xf8\x15\x00\x00\xff\xff\x8a\xa5\xab\x4e\x83\x03\x00\x00"),
		},
		"/protobuf_example.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "protobuf_example.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 21, 52, 9, 367506282, time.UTC),
			uncompressedSize: 2267,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\x4b\x6f\x9b\x4c\x14\x5d\x87\x5f\x71\x65\x7d\x0b\x88\xfc\xe1\xaa\xdd\x59\x22\x52\x95\xd0\x34\x52\xec\xa4\xe0\xac\xa2\x28\x9a\xc2\x8d\x4b\x0b\x03\x9e\xb9\x58\x89\x10\xff\xbd\x62\x66\x78\xf9\x55\xa9\xea\x2e\xde\x60\xb8\x8f\x73\xe6\xdc\x73\xa7\x60\xd1\x2f\xb6\x46\x20\x94\x64\x59\x49\x56\xe4\x82\x60\x12\xe5\x9c\xf0\x95\x26\x96\x55\x55\xff\xc3\x7f\x85\xc8\x7f\x62\x44\x30\xf7\xc0\xbd\x37\xff\xeb\xba\x8b\x51\xfe\xbd\x7c\x69\x83\xfa\xa5\x8d\x4a\x14\x5b\x14\x2a\xb6\xc8\xe3\x32\xc5\x2e\x42\x45\xaa\x3e\xaf\x30\x2b\x52\x46\x2a\x60\x55\x15\x08\xc6\xd7\xd8\xb7\x75\x43\x14\xdb\x24\x42\xd9\xc4\xe9\xad\x40\xa8\x2a\x70\x97\x2c\xc3\xba\x86\x84\x13\x8a\x17\x16\x21\x54\x16\x00\x40\xd3\x58\xd7\xbb\xc1\xfd\xa5\x2a\x01\xf3\x53\x98\x02\x37\x0d\xa6\xdd\x77\xbf\x46\x5a\xa0\x94\x4c\x95\xe0\xa6\x44\x49\xab\xb7\x02\x9d\x03\xa5\xf2\x64\xa9\x2c\x72\x2e\xb1\xab\x1d\x15\x1b\x4a\x97\x79\x96\x21\x27\x39\x68\x3d\x9b\xa9\xe3\xec\xa2\x21\x8f\x77\x3f\x25\x2f\x80\x1b\xb0\x53\xe4\x8a\x8b\xfb\x25\xc1\x34\xbe\x4d\x24\x39\xf0\x61\x9c\xab\xd5\x81\xba\xb6\x23\x7a\x05\x33\x49\xf7\x52\x3f\xa7\x20\xf4\x29\x9b\xc4\x46\x8f\x36\xd9\x01\x1b\x85\x00\x14\x22\x17\xce\x98\x4c\x2a\xf1\x1f\x21\x08\x23\x93\x09\xc9\x36\x34\x85\x63\xd8\xbd\x10\x83\x57\xed\x20\xf3\x62\xf5\x0a\xf7\xb3\x31\x83\x91\xda\x6d\xb3\x73\xd5\x21\xfc\xfa\x39\xf0\xaf\x60\x71\x77\xe5\xdf\x86\xd6\xf9\xcc\x38\x51\x2b\xeb\xde\xc8\x45\x1e\x63\x0a\x24\x4a\x75\x5c\x33\x1a\xc3\x10\xe4\x0f\x26\x30\x86\xac\xc9\x19\xfb\x50\x45\x49\x94\x11\x75\x2e\x6c\x27\xae\x86\xb4\x67\x43\x03\x18\x60\x81\x8c\x30\x56\x88\x83\x14\xd3\x82\x12\x4a\xb1\x47\x78\x7c\x6a\xf0\x1a\x7f\xed\x99\x65\x67\x3e\x87\xeb\x8f\x56\xff\x59\xe1\xb1\xd8\x87\xc4\x04\xdb\x5f\x3e\x2c\x42\xa7\x17\x75\x77\x20\x3e\x2f\x33\xd9\xed\x3e\x6f\x48\xcd\xbd\x21\xc7\x4e\x71\xfd\x4d\xa7\xd4\x35\x20\x2f\x33\x14\x8c\x92\x9c\x77\xb2\x77\xc1\x84\xd3\xa7\x8f\x56\x94\x73\x49\x60\x5b\x67\x83\x5d\xeb\x95\x3f\x1b\x14\x3c\xef\xeb\xe2\x29\x65\xee\x44\x8c\xe2\x80\x0e\x8e\x3e\x31\xdc\x2c\x57\xe0\x5d\x40\xb8\x0a\x6e\x96\xd7\xa0\x4e\xb9\x65\x62\xc8\xe5\x59\x3d\x3d\xc8\x58\xf1\xa8\x68\x3d\x49\x12\x09\x5f\x57\x27\x68\x75\xb0\x73\x98\x0c\xdc\x34\x99\xea\x9a\x6e\x16\x9a\x83\x01\xf7\x2e\x14\x9b\x83\x1c\xb6\x2c\x2d\x5b\x12\x1a\xfe\x49\x71\xd9\xbb\x1d\xc7\xc6\x1c\x81\xcf\x47\x82\x4c\x4f\xef\x5e\xef\x87\xc0\xff\xf6\xe0\x87\xab\xf0\xb8\x05\xc6\x3b\x39\xd8\x3b\x73\xef\x76\x9b\xf7\x2e\xb6\xeb\xe4\x72\x05\x7e\x78\x7f\xb7\x0c\xfd\xbf\x53\xd3\xdc\xb1\xef\x5e\xce\xdf\x01\x00\x00\xff\xff\xc5\x1e\xc2\xeb\xdb\x08\x00\x00"),
		},
		"/service": &vfsgen۰DirInfo{
			name:    "service",
			modTime: time.Date(2019, 8, 25, 17, 53, 26, 856333807, time.UTC),
		},
		"/service/interface.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "interface.go.tmpl",
			modTime:          time.Date(2019, 8, 25, 17, 53, 26, 848333804, time.UTC),
			uncompressedSize: 501,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\xcb\x6e\xc2\x30\x10\xbc\xe7\x2b\x56\x88\x43\x22\x81\xb9\x57\xea\x09\xda\xaa\x52\x79\xa8\xcd\x0f\x98\x64\x88\xd2\x06\xdb\xd8\x4b\x05\x42\xfe\xf7\xca\x76\x48\x24\x0e\x3d\x58\xf6\xce\xec\xcc\x8e\x77\xb1\xa0\xa5\xae\x41\x0d\x14\xac\x64\xd4\xb4\xbf\x52\xa3\xeb\x56\x09\x5a\x6d\x69\xb3\x2d\xe9\x65\xf5\x5e\x8a\xcc\xc8\xea\x47\x36\x20\x07\xfb\xdb\x56\xc8\xb2\xdb\x6d\x4e\x53\x63\xf5\x37\x2a\xa6\xa7\x67\x12\xbb\xfe\xed\xfd\xc0\xb1\xde\x9f\x0f\x77\x32\x15\x77\x36\xf8\xc0\x46\x6e\xad\xeb\x73\x87\x81\x61\xd3\x45\xb8\xc4\xd1\x74\x92\x23\x91\xb5\x47\xa3\x2d\x53\x9e\x11\x11\x4d\x2a\xad\x18\x17\x9e\x64\x45\xc8\x41\x56\xaa\x06\xe3\x40\xf1\x95\x32\xba\xa0\xe4\xab\x01\xf5\x00\xb5\x8a\x61\x0f\xb2\x02\xdd\xa2\xd1\xa0\x15\x9f\xbb\x65\x6c\x4f\xe8\x9c\xa6\x16\xa7\x90\x22\x1f\x5d\xdf\xc0\x6b\x38\x27\x63\x3b\x4e\x67\x38\x2e\xaf\x06\xc5\x83\xcc\xfd\x2b\x73\x46\x2b\x87\x07\x9d\xd8\xc8\x23\xbc\xcf\x2b\xbe\x50\xff\x35\xb1\x4c\xf7\x2c\x64\x0c\x61\xc4\x6b\x8b\xae\xfe\x68\x5d\x58\x70\x41\x79\x82\xdd\x08\x7b\x3f\x23\x58\x1b\x8e\xb6\xc5\x90\x08\xaa\x0e\x83\xd2\x6e\xfb\xe2\x2f\x00\x00\xff\xff\xa4\x87\xdb\x17\xf5\x01\x00\x00"),
		},
		"/transport": &vfsgen۰DirInfo{
			name:    "transport",
			modTime: time.Date(2019, 8, 1, 11, 6, 44, 716897420, time.UTC),
		},
		"/transport/grpc": &vfsgen۰DirInfo{
			name:    "grpc",
			modTime: time.Date(2019, 8, 23, 22, 30, 18, 180873756, time.UTC),
		},
		"/transport/grpc/client.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "client.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 18, 7, 12, 535179892, time.UTC),
			uncompressedSize: 158,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x49\x2d\x2e\xe1\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\x4a\xce\xcf\x2b\x49\xad\x28\x51\xe2\xe2\xaa\xae\xd6\x55\x50\x29\x28\xca\x2f\xc9\x4f\x2a\x4d\x53\xb0\xb2\x55\xd0\x0b\x80\x71\x6a\x6b\x21\xb2\xc9\x39\x99\xa9\x79\x25\x60\x39\xdf\xfc\x94\xd2\x9c\x54\xb8\x4c\x49\x41\x0e\x58\x38\x24\x35\xb7\x20\x27\xb1\x04\x2c\xc1\xa5\xaf\xaf\xe0\xe1\xea\xe3\xe3\xaf\xe0\xec\xe3\xe9\xea\x17\x02\xe2\x57\x57\xc3\x4c\xd1\x0b\x4a\x2d\x29\xaa\x74\xce\x2f\xcd\x2b\x01\x29\x06\x04\x00\x00\xff\xff\xe2\x0b\x91\x64\x9e\x00\x00\x00"),
		},
		"/transport/grpc/server.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "server.go.tmpl",
			modTime:          time.Date(2019, 8, 23, 22, 30, 18, 172873782, time.UTC),
			uncompressedSize: 2377,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc1\x6e\xe3\x36\x10\x3d\x4b\x5f\x31\x35\x8a\xc2\x5a\x38\xd4\x3d\x40\x4e\x4e\xb0\xed\x61\xe3\xc0\xf1\xbd\xa0\xa5\xb1\xc2\xae\x44\x32\x24\x95\xdd\x40\xf0\xbf\x17\x43\x52\xb4\x62\xd9\x45\x7a\xd9\x83\x61\x92\x33\xc3\x79\x33\xef\x71\x54\x96\xb0\x56\x35\x42\x83\x12\x0d\x77\x58\xc3\xfe\x1d\x1a\x55\x0b\xc9\xe0\x7e\x03\x8f\x9b\x1d\x3c\xdc\xff\xb5\x63\xb9\xe6\xd5\x77\xde\x20\x34\x46\x57\x79\x3e\x0c\x37\xf0\xbb\x36\xea\x1f\xac\x1c\xdc\xde\x01\x7b\x8a\xeb\xe3\x31\xd9\x9c\xda\xf7\x87\xd1\x18\x36\xa3\xd5\xa2\x79\x43\xe3\x6d\xdf\x54\xdd\xb7\x98\x2c\x4e\xb7\xfe\x78\x87\x9d\x6e\xb9\xf3\x86\x5c\x74\x5a\x19\x07\xcb\x3c\x5b\x54\x4a\x3a\xfc\xe9\x16\x79\xb6\x40\x63\x94\xb1\xb4\x6a\x84\x7b\xe9\xf7\xac\x52\x5d\xd9\xa8\x9b\xef\xc2\x95\xf4\x73\x86\x4b\x4b\x81\x25\x61\x5e\xe4\x79\xa6\xf7\xb0\x18\x86\x04\x3c\xe1\x3a\x81\x20\xaf\x0f\x2e\xc9\x52\x0a\xe9\xd0\x48\xde\x96\x28\x6b\xad\x84\x74\x8b\xbc\xa0\x46\x80\xe1\xb2\xc1\x53\xc5\xec\x19\xcd\x9b\xa8\xd0\x12\x74\xf7\xae\x11\x86\x01\xd8\x23\xef\xf0\x78\x7c\x0e\x75\x5b\x67\xfa\xca\xc1\x90\x67\x29\x9c\x6d\x9f\xd6\x3e\x22\xcb\x46\x77\x38\x1e\xff\xe4\xb2\x6e\xd1\xf8\xa6\xb3\xb8\xa1\xa0\x1b\x40\x59\x93\x37\x75\x2d\xb4\x53\x54\xe8\x83\xa8\x79\x31\x3a\x3f\xf4\xb2\x82\x47\xfc\x31\xb9\x31\x20\x58\x8e\x35\x58\x18\x57\xec\x19\xdd\x0a\x94\x76\x42\x49\x0b\x8c\x31\x9f\x33\xb8\x6f\xfc\x69\x01\x7a\xcf\x66\x57\x51\x15\x06\x5d\x6f\x24\xfc\x31\x33\x0e\xa1\x9c\x4f\x94\x78\x1b\x6a\x7c\xc4\x1f\x11\x61\x9e\x65\x59\x42\x39\x4d\xfb\x10\x0f\x57\xe4\x71\x8f\x95\xaa\x71\x62\xdd\xe2\x6b\x8f\x36\x18\x1f\xe4\xcc\x68\xb5\x92\x16\xbd\x35\x96\xca\x18\xa3\x6d\xb1\xf2\xb0\x52\x63\x33\xea\x6d\x3e\xc7\x1e\x54\x6a\xf0\x95\x1a\xbd\x3c\x91\xfe\x15\xdd\x37\xb4\x96\x7b\xdf\x80\x61\xf7\xae\xb1\x48\xc2\x36\x68\xff\x33\x24\x20\x4b\x31\x79\x59\xc2\x04\x39\x08\x0b\xee\x05\x81\x57\xae\xe7\x2d\xbc\x44\x5d\x88\x4e\xb7\xd8\xa1\x74\x9c\x6a\x01\x75\xf0\x4e\xdb\xa7\x35\xd4\x78\x10\x12\x6b\x10\xd2\x1f\xa5\xa4\x41\x13\x4b\x6b\xde\xe0\xcb\xb9\x74\x46\xd6\x8a\x69\xe6\x65\xe5\x7e\x42\x7c\x75\x6c\x1d\xfe\x57\x60\x42\x89\xf0\x25\x48\x82\x1a\x32\x06\x14\xb0\x3c\x9d\xda\xf1\x74\x05\xfe\xb9\x16\x24\x97\xbf\x29\x3e\x32\x41\xc7\xd4\x17\x6b\xde\xd8\x5c\x15\x41\x7f\x5f\xb7\x4f\x6b\x82\x91\xd2\x16\x79\x26\x0e\x3e\xf2\xb7\x3b\x90\xa2\xa5\x4b\x01\x00\xca\x12\x76\x9b\xfb\xcd\x2d\xa0\x67\x3e\xa4\x0c\xa6\x28\x51\x29\x5a\x9f\x92\xf8\x1d\x65\x3b\x62\x61\x97\x70\x17\x2b\x8a\xc9\x03\x89\x51\x1b\x17\x64\xf1\x0b\x55\x71\x4d\xf2\x24\x91\x58\x8a\xd8\xb7\x48\x62\xa8\xc9\x55\xc8\x06\xb8\x04\x21\x2b\xd5\xd1\x3a\x4d\xe6\x33\xde\xa0\x0b\x69\x29\x87\x90\x4e\x01\x87\x5a\x75\x5c\xc8\x1b\xab\xb1\x12\x07\x51\xc5\xb9\x15\x35\x74\x0d\xc7\x65\xc1\xe8\x7d\x82\x49\x73\xf4\xc0\x2b\x1c\x48\x2a\x93\xdd\x54\x22\xe2\x30\x89\xb8\x4b\x24\x67\x67\x34\x2a\x63\x69\x64\x2c\x17\xde\x3e\x83\xb2\x28\x22\xcf\x9e\x97\x74\xe1\x48\x74\x1c\xca\xdb\x24\xaa\x28\xaf\x24\xca\x73\x97\x50\xb2\x59\x1a\x7c\xbd\x24\xc1\x73\x74\x1f\x45\x16\xaf\x0e\x6a\xa2\x26\x5f\x1d\x4f\x17\x98\xf4\x82\x26\xf6\x54\xef\x1a\x45\x8b\x33\x9d\x46\x6e\xec\x84\xbd\x44\x74\x24\x36\xf2\x36\xa6\x4d\xa5\x85\xa4\xd7\xde\xf9\x08\xe9\x93\xac\xa5\x80\x4f\x93\x76\x86\x23\x71\xe6\x1f\xc6\xe9\x6d\xa6\xef\xd4\x30\x24\xd5\x1e\x8f\x05\x7d\xd4\xb7\xe7\xc3\x64\x76\x69\xa8\x99\x88\xb3\xff\x97\xb8\xe9\xf5\xb3\x49\x30\x59\xfe\x1b\x00\x00\xff\xff\xc1\xbd\xcd\xd9\x49\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/endpoint"].(os.FileInfo),
		fs["/protobuf_example.go.tmpl"].(os.FileInfo),
		fs["/service"].(os.FileInfo),
		fs["/transport"].(os.FileInfo),
	}
	fs["/endpoint"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/endpoint/endpoints.go.tmpl"].(os.FileInfo),
		fs["/endpoint/request_response.go.tmpl"].(os.FileInfo),
	}
	fs["/service"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/service/interface.go.tmpl"].(os.FileInfo),
	}
	fs["/transport"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/transport/grpc"].(os.FileInfo),
	}
	fs["/transport/grpc"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/transport/grpc/client.go.tmpl"].(os.FileInfo),
		fs["/transport/grpc/server.go.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
