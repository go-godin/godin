// Code generated by godin. DO NOT EDIT.
package grpc

{{- $project := .Project }}
{{- $protobuf := .Protobuf }}
{{- $server := .Module }}
{{- $tpl := .Template }}

import (
	"context"
	"errors"
	"github.com/go-kit/kit/transport/grpc"

	pb "{{ $project.Protobuf.Module }}"

	"{{ $project.Module }}/internal/endpoint"
)

{{ range $protobuf.Services }}
type {{ .Name}}Server struct {
	{{ range .RPCs }}
		{{ .Name }}Handler grpc.Handler
	{{- end }}
}
{{ $serviceName := .Name }}
func New{{ .Name }}Server(endpoints endpoint.Set, options ...grpc.ServerOption) pb.{{ .Name }}Server {
	return &{{ .Name }}Server{
		{{ range .RPCs }}
		{{ .Name }}Handler: grpc.NewServer(
			endpoints.{{ .Name }}Endpoint,
			Decode{{ .Name }}Request,
			Encode{{ .Name }}Response,
			options...,
		),
		{{- end }}
	}
}

{{ range .RPCs }}

{{- $req := ($protobuf.GetMessage .RequestType) }}
{{- $res := ($protobuf.GetMessage .ResponseType) }}

// {{ .Name }} is the actual handler implementation of the RPC defined in the protobuf.
func (srv *{{ $serviceName }}Server) {{ .Name }}(ctx context.Context, request *pb.{{ $req.Name }}) (*pb.{{ $res.Name }}, error) {
	_, response, err := srv.{{ .Name }}Handler.ServeGRPC(ctx, request)
	if err != nil {
	    // TODO: encode error
	    return nil, err
	}
	return response.(*pb.{{ $res.Name }}), nil
}
{{- end }}

{{ range .RPCs }}
{{- $req := ($protobuf.GetMessage .RequestType) }}
{{- $res := ($protobuf.GetMessage .ResponseType) }}

// Decode{{ .Name }}Request is responsible of decoding an incoming protobuf {{ $req.Name }} message
// into a domain-specific struct.
func Decode{{ .Name }}Request(ctx context.Context, pbRequest interface{}) (interface{}, error) {
	if pbRequest == nil {
		return nil, errors.New("nil {{ .Name }}Request")
	}
	req := pbRequest.(*pb.{{.Name}}Request)
	request, err := {{.Name}}RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// Encode{{ .Name }}Response is responsible of encoding outgoing {{ $res.Name }} structs
// into a protobuf message.
func Encode{{.Name}}Response(ctx context.Context, response interface{}) (interface{}, error) {
	if response == nil {
		return nil, errors.New("nil {{.Name}}Response")
	}
	res := response.(endpoint.{{$res.Name}})
	pbResponse, err := {{.Name}}ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}
{{- end }}
{{- end }}
